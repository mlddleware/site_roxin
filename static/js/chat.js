console.log("–ó–∞–≥—Ä—É–∑–∫–∞ chat.js...");

// –ï–¥–∏–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ WebSocket
let socket;
let currentChatUserId = null;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
let activeRequest = null;
let lastSelectedUserId = null;
let currentUserName = null; // –ò–º—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
let currentReplyTo = null; // ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ–º
let messageIdCounter = 1; // –°—á–µ—Ç—á–∏–∫ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID —Å–æ–æ–±—â–µ–Ω–∏–π

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ HTML (–∑–∞—â–∏—Ç–∞ –æ—Ç XSS)
function sanitizeHTML(text) {
    if (!text) return '';
    return text.toString()
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#039;');
}

// –§—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑–≤–Ω–µ DOMContentLoaded
let openChatByIdImpl = null;

function openChatById(chatId) {
    if (openChatByIdImpl) {
        openChatByIdImpl(chatId);
    } else {
        // –ï—Å–ª–∏ DOM –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è
        window.pendingChatId = chatId;
    }
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫—ç—à —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏
const chatCache = {
    data: {},
    maxAge: {
        messages: 30000,    // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        user: 300000,       // 5 –º–∏–Ω—É—Ç –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chatId: 3600000     // 1 —á–∞—Å –¥–ª—è ID —á–∞—Ç–æ–≤
    },
    
    get(key) {
        const item = this.data[key];
        if (!item) return null;
        if (Date.now() - item.timestamp > this.getMaxAge(key)) {
            delete this.data[key];
            return null;
        }
        return item.value;
    },
    
    set(key, value) {
        this.data[key] = {
            value,
            timestamp: Date.now()
        };
    },
    
    getMaxAge(key) {
        if (key.startsWith('messages_')) return this.maxAge.messages;
        if (key.startsWith('userData_')) return this.maxAge.user;
        if (key.startsWith('chatId_')) return this.maxAge.chatId;
        return this.maxAge.messages;
    },
    
    invalidate(key) {
        delete this.data[key];
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∫–µ—Ç–∞
if (typeof io === "undefined") {
    console.error("‚ùå –û—à–∏–±–∫–∞: io() –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω! –ü—Ä–æ–≤–µ—Ä—å –∑–∞–≥—Ä—É–∑–∫—É socket.io.js.");
} else {
    socket = io(window.location.origin, { transports: ["websocket"] });
    
    socket.on("connect", () => {
        console.log("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WebSocket!");
    });

    socket.on("disconnect", () => {
        console.log("‚ùå WebSocket –æ—Ç–∫–ª—é—á—ë–Ω!");
    });
}

// –§—É–Ω–∫—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function requestNotificationSound() {
    const audio = new Audio("/static/sounds/notification.mp3");

    if (document.hidden) {
        document.addEventListener("visibilitychange", () => {
            if (!document.hidden) {
                audio.play().catch(error => console.warn("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:", error));
            }
        }, { once: true });
    } else {
        audio.play().catch(error => console.warn("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:", error));
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è openChatById
window.addEventListener('openChatById', function(e) {
    const chatId = e.detail.chatId;
    if (chatId) {
        openChatById(chatId);
    }
});

document.addEventListener("DOMContentLoaded", () => {
    const pathParts = window.location.pathname.split("/");
    const chatListElement = document.getElementById("chatList");
    const messagesContainer = document.getElementById("messagesContainer");
    const messageInput = document.getElementById("messageInput");
    const sendBtn = document.getElementById("sendBtn");
    const chatHeader = document.getElementById("chatHeader");
    const chatName = document.getElementById("chatName");
    const chatAvatar = document.getElementById("chatAvatar");
    const onlineStatus = document.getElementById("onlineStatus");
    const statusDot = document.getElementById("statusDot");
    const messageInputContainer = document.getElementById("messageInputContainer");
    
    // –ú–æ–±–∏–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    const navChats = document.getElementById("navChats");
    const navChat = document.getElementById("navChat");
    const chatSidebar = document.getElementById("chatSidebar");

    // –†–µ–∞–ª–∏–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é openChatById
    openChatByIdImpl = function(chatId) {
        fetch(`/chat/info/${chatId}`)
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞: ${data.error}`);
                window.history.pushState({}, "", "/chat"); // –ï—Å–ª–∏ —á–∞—Ç–∞ –Ω–µ—Ç ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç
                return;
            }
    
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ –∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            chatHeader.style.display = 'flex';
            messageInputContainer.style.display = 'block';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∞–≤–∞—Ç–∞—Ä –∏ —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω
            chatName.textContent = data.username;
            if (chatAvatar) {
                chatAvatar.src = data.avatar || "/static/images/user.png";
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω
            if (onlineStatus) {
                onlineStatus.textContent = data.online_status;
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å–∞
                if (data.online_status === "–û–Ω–ª–∞–π–Ω") {
                    statusDot.classList.remove('offline');
                } else {
                    statusDot.classList.add('offline');
                }
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à
            chatCache.set(`userData_${data.user_id}`, data);
    
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            loadChatMessages(data.user_id);
    
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π ID —á–∞—Ç–∞
            currentChatUserId = data.user_id;
            lastSelectedUserId = data.user_id;
        })
        .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞:", error));
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    if (window.pendingChatId) {
        openChatByIdImpl(window.pendingChatId);
        delete window.pendingChatId;
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    function showWelcomeMessage() {
        messagesContainer.innerHTML = `
            <div class="welcome-message">
                <div class="welcome-icon">
                    <i data-lucide="message-circle"></i>
                </div>
                <h2 class="welcome-title">–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥</h2>
                <p class="welcome-subtitle">–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏</p>
            </div>
        `;
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏ Lucide
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    function loadChatList() {
        const cacheKey = 'chatList';
        const cachedData = chatCache.get(cacheKey);
        
        if (cachedData) {
            console.log("üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫—ç—à–∞");
            displayChatList(cachedData);
            return;
        }

        console.log("üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤...");
        fetch("/chat/list")
            .then(response => response.json())
            .then(chats => {
                chatCache.set(cacheKey, chats);
                displayChatList(chats);
                prefetchFirstChats(chats);
            })
            .catch(error => {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤:", error);
                chatListElement.innerHTML = '<div class="error-message">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤</div>';
            });
    }

    function displayChatList(chats) {
        if (!chatListElement) return;

        if (chats.length === 0) {
            chatListElement.innerHTML = `
                <div class="empty-state">
                    <i data-lucide="message-circle"></i>
                    <p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤</p>
                </div>
                    `;
            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
            return;
        }

        chatListElement.innerHTML = chats.map(chat => `
            <div class="chat-item" onclick="selectChat(${chat.user_id}, '${sanitizeHTML(chat.username)}', '${chat.avatar}')">
                <img src="${chat.avatar}" alt="${sanitizeHTML(chat.username)}" class="chat-avatar">
                <div class="chat-info">
                    <div class="chat-name">${sanitizeHTML(chat.username)}</div>
                    <div class="chat-last-message">${chat.last_message ? sanitizeHTML(chat.last_message) : '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'}</div>
                </div>
                <div class="chat-meta">
                    <div class="chat-time">${chat.last_message_date || ''}</div>
                </div>
            </div>
        `).join('');
    }

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Ç–æ–≤
    function prefetchFirstChats(chats) {
        const topChats = chats.slice(0, 3);
        topChats.forEach(chat => {
            prefetchChatData(chat.user_id);
        });
    }
    
    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞
    function prefetchChatData(userId) {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –µ—â–µ –Ω–µ—Ç –≤ –∫—ç—à–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
        if (!chatCache.get(`userData_${userId}`)) {
            fetch(`/chat/user/${userId}`)
                .then(response => response.json())
                .then(data => {
                    chatCache.set(`userData_${userId}`, data);
                })
                .catch(() => {});
        }
    }

    // –í—ã–±–æ—Ä —á–∞—Ç–∞
    function selectChat(userId, username, avatar) {
        console.log(`üí¨ –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${username} (ID: ${userId})`);
    
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (activeRequest) {
            activeRequest.abort();
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
        document.querySelectorAll('.chat-item').forEach(item => {
            item.classList.remove('active');
        });
        event.currentTarget.classList.add('active');
    
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ –∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        chatHeader.style.display = 'flex';
        messageInputContainer.style.display = 'block';
    
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∞–≤–∞—Ç–∞—Ä
        chatName.textContent = username;
        if (chatAvatar) {
            chatAvatar.src = avatar || "/static/images/user.png";
        }
        
        // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö —Å–∫—Ä—ã–≤–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
        if (window.innerWidth <= 768) {
            chatSidebar.classList.remove('mobile-active');
            navChat.classList.add('active');
            navChats.classList.remove('active');
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π AbortController –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        const controller = new AbortController();
        activeRequest = controller;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        loadUserInfo(userId)
            .then(() => {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                return loadChatMessages(userId);
            })
            .then(() => {
                currentChatUserId = userId;
                lastSelectedUserId = userId;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º URL
                const newUrl = `/chat/${userId}`;
                if (window.location.pathname !== newUrl) {
                    window.history.pushState({}, '', newUrl);
                }
                
                activeRequest = null;
            })
            .catch(error => {
                if (error.name !== 'AbortError') {
                    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Ç–∞:", error);
                }
                activeRequest = null;
            });
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
    function loadChatMessages(userId) {
        const cacheKey = `messages_${userId}`;
        const cachedMessages = chatCache.get(cacheKey);
        
        if (cachedMessages) {
            console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫—ç—à–∞`);
            displayMessages(cachedMessages);
            return Promise.resolve();
        }

        console.log(`üí¨ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
        
        return fetch(`/chat/messages/${userId}`, {
            signal: activeRequest?.signal
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            return response.json();
        })
            .then(messages => {
            chatCache.set(cacheKey, messages);
            displayMessages(messages);
            })
            .catch(error => {
            if (error.name !== 'AbortError') {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
                messagesContainer.innerHTML = '<div class="error-message">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π</div>';
            }
            throw error;
        });
    }

    function displayMessages(messages) {
        if (!messagesContainer) return;

        if (messages.length === 0) {
            messagesContainer.innerHTML = `
                <div class="welcome-message">
                    <div class="welcome-icon">
                        <i data-lucide="message-circle"></i>
                    </div>
                    <h2 class="welcome-title">–ù–∞—á–Ω–∏—Ç–µ –±–µ—Å–µ–¥—É</h2>
                    <p class="welcome-subtitle">–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</p>
                </div>
            `;
            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
        }
            return;
        }

        messagesContainer.innerHTML = messages.map(msg => `
            <div class="message ${msg.is_mine ? 'sent' : 'received'}">
                <div class="message-bubble">
                    <div class="message-header">
                        <span class="message-sender">${sanitizeHTML(msg.sender)}</span>
                        <span class="message-time">${msg.timestamp}</span>
                    </div>
                    <div class="message-text">${sanitizeHTML(msg.message)}</div>
                </div>
            </div>
        `).join('');

            scrollToBottom();
        }
        
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket
    function handleNewMessage(data) {
        console.log("üì® –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", data);
        
        // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        chatCache.invalidate(`messages_${data.sender_id}`);
        chatCache.invalidate(`messages_${data.recipient_id}`);
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if (currentChatUserId === data.sender_id || currentChatUserId === data.recipient_id) {
            const isMyMessage = data.sender_id.toString() === getCookie('user_id');
            appendMessage(data.sender, data.message, new Date().toLocaleString(), null, data.message_id, isMyMessage);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        updateChatList(data.sender_id, data.recipient_id, data.message);
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        requestNotificationSound();
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    function appendMessage(sender, text, timestamp, replyTo = null, messageId = null, isMyMessage = false) {
        if (!messagesContainer) return;
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        const welcomeMessage = messagesContainer.querySelector('.welcome-message');
        if (welcomeMessage) {
            welcomeMessage.remove();
        }

        const messageElement = document.createElement('div');
        messageElement.className = `message ${isMyMessage ? 'sent' : 'received'}`;
        messageElement.innerHTML = `
            <div class="message-bubble">
                <div class="message-header">
                    <span class="message-sender">${sanitizeHTML(sender)}</span>
                    <span class="message-time">${timestamp}</span>
            </div>
                <div class="message-text">${sanitizeHTML(text)}</div>
        </div>
    `;
    
        messagesContainer.appendChild(messageElement);
        scrollToBottom();
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    function loadUserInfo(userId) {
        const cacheKey = `userData_${userId}`;
        const cachedData = chatCache.get(cacheKey);
        
        if (cachedData) {
            updateUserStatus(cachedData.online_status);
            return Promise.resolve();
}

    return fetch(`/chat/user/${userId}`)
        .then(response => response.json())
        .then(data => {
                chatCache.set(cacheKey, data);
                updateUserStatus(data.online_status);
            })
            .catch(error => {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:", error);
            });
    }

    function updateUserStatus(status) {
        if (onlineStatus) {
            onlineStatus.textContent = status;
            if (status === "–û–Ω–ª–∞–π–Ω") {
                statusDot.classList.remove('offline');
            } else {
                statusDot.classList.add('offline');
            }
        }
}

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function sendMessage() {
    const messageText = messageInput.value.trim();
    if (!messageText || !currentChatUserId) return;

        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${currentChatUserId}: ${messageText}`);

        const messageData = {
        user_id: currentChatUserId,
            message: messageText,
            message_id: messageIdCounter++
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
        if (socket && socket.connected) {
            socket.emit("send_message", messageData);
        } else {
            console.warn("‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API...");
            fetch("/chat/send", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(messageData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", data.error);
                } else {
                    console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ API");
                }
            })
            .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ API:", error));
        }

        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        messageInput.value = '';
        messageInput.style.height = 'auto';
        sendBtn.disabled = true;

        // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à —Å–æ–æ–±—â–µ–Ω–∏–π
        chatCache.invalidate(`messages_${currentChatUserId}`);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –ø–æ—Å–ª–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function updateChatList(senderId, recipientId, message) {
        const chatItems = document.querySelectorAll('.chat-item');
    chatItems.forEach(item => {
            const userId = item.getAttribute('onclick')?.match(/selectChat\((\d+)/)?.[1];
            if (userId && (userId === senderId.toString() || userId === recipientId.toString())) {
                const lastMessageElement = item.querySelector('.chat-last-message');
                const timeElement = item.querySelector('.chat-time');
                if (lastMessageElement) {
                    lastMessageElement.textContent = message.length > 30 ? message.substring(0, 30) + '...' : message;
                }
            if (timeElement) {
                    timeElement.textContent = new Date().toLocaleTimeString().slice(0, 5);
            }
                // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —á–∞—Ç –Ω–∞–≤–µ—Ä—Ö —Å–ø–∏—Å–∫–∞
                item.parentNode.insertBefore(item, item.parentNode.firstChild);
        }
    });
}

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function scrollToBottom() {
        if (messagesContainer) {
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
}

    function formatDateTime(isoDate) {
        const date = new Date(isoDate);
        return date.toLocaleString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    loadChatList();
    showWelcomeMessage();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    if (sendBtn) {
        sendBtn.addEventListener('click', sendMessage);
    }

    if (messageInput) {
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
        sendMessage();
    }
        });

        messageInput.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = Math.min(this.scrollHeight, 120) + 'px';
            sendBtn.disabled = !this.value.trim();
        });
    }
    
    // WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    if (socket) {
        socket.on("new_message", handleNewMessage);
}

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ HTML
    window.selectChat = selectChat;

    console.log("‚úÖ Chat.js —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!");
});