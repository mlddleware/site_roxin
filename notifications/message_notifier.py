import asyncio
import logging
from datetime import datetime, timezone
from database.connection import get_db_connection, release_db_connection

# –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏
from notifications.telegram_bot import notify_message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
def run_async_with_loop(coro):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∫–æ—Ä—É—Ç–∏–Ω—É –≤ –Ω–æ–≤–æ–º event loop"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        return loop.run_until_complete(coro)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏: {e}")
    finally:
        loop.close()

def notify_new_message(sender_id, recipient_id, message):
    try:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"üîî –í—Ö–æ–¥—è—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:")
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å (sender_id): {sender_id}")
        logger.info(f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å (recipient_id): {recipient_id}")
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        cursor.execute("SELECT username FROM users WHERE id = %s", (sender_id,))
        sender_data = cursor.fetchone()
        
        if not sender_data:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å ID {sender_id}")
            release_db_connection(conn)
            return
            
        sender_name = sender_data[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ Telegram
        cursor.execute("""
            SELECT telegram_id, notifications_enabled, user_id 
            FROM telegram_profiles 
            WHERE user_id = %s
        """, (recipient_id,))
        
        result = cursor.fetchone()
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if not result:
            logger.warning(f"‚ùå –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {recipient_id} –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram-–ø—Ä–æ—Ñ–∏–ª—å")
            release_db_connection(conn)
            return
        
        telegram_id, notifications_enabled, profile_user_id = result
        
        logger.info(f"‚úÖ Telegram-–ø—Ä–æ—Ñ–∏–ª—å:")
        logger.info(f"Telegram ID: {telegram_id}")
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã: {notifications_enabled}")
        logger.info(f"User ID –ø—Ä–æ—Ñ–∏–ª—è: {profile_user_id}")
        
        if not notifications_enabled:
            logger.info(f"üö´ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {recipient_id} –æ—Ç–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            release_db_connection(conn)
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        run_async_with_loop(notify_message(recipient_id, sender_name, message))
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
        cursor.execute("""
            INSERT INTO notification_log 
            (user_id, notification_type, message, created_at)
            VALUES (%s, %s, %s, %s)
        """, (
            recipient_id, 
            'message', 
            f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_name}", 
            datetime.now(timezone.utc)
        ))
        
        conn.commit()
        release_db_connection(conn)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        if 'conn' in locals():
            release_db_connection(conn)